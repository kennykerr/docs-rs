initSidebarItems({"attr":[["implement","Rust structs can use the `implement` macro to implement entire WinRT classes or any combination of existing COM and WinRT interfaces."]],"enum":[["Param","A WinRT method parameter used to accept either a reference or value. `Param` is used by the generated bindings and should not generally be used directly."]],"macro":[["build","A macro for generating WinRT modules to a .rs file at build time."],["include_bindings","Includes the generating bindings into the current context."]],"struct":[["Array","A WinRT array stores elements contiguously in a heap-allocated buffer."],["BString","A Basic string, sometimes called a BSTR, is a string data type used by certain COM interfaces and interop functions."],["Error","A WinRT error object consists of both an error code as well as detailed error information for debugging."],["ErrorCode","A primitive error code value returned by most COM functions. An `ErrorCode` is sometimes called an `HRESULT`."],["FactoryCache","Attempts to load and cache the factory interface for the given WinRT class. This is automatically"],["Guid","A globally unique identifier (GUID) used to identify COM and WinRT interfaces."],["HString","A WinRT string, sometimes called an HSTRING, is reference-counted and logically immutable. It should only be used for communicating with WinRT APIs."],["IActivationFactory","WinRT classes have a supporting factory object that implements `IActivationFactory` to create a new instance of the WinRT class with some default state. `IActivationFactory` represents the IActivationFactory interface."],["IAgileObject","A marker interface indicating that an object is free-threaded and may be called from any apartment. `IAgileObject` represents the IAgileObject interface."],["IUnknown","All COM interfaces (and thus WinRT classes and interfaces) implement IUnknown under the hood to provide reference-counted lifetime management as well as the ability to query for additional interfaces that the object may implement."],["Object","A WinRT object that may be used as a polymorphic stand-in for any WinRT class, interface, or boxed value. `Object` implements the IInspectable interface."],["RefCount","A thread-safe reference count for use with COM implementations."],["Waiter","A simple blocking waiter used by the generated bindings and should not be used directly."]],"trait":[["Abi","Provides a generic way of referring to and converting between a Rust object and its WinRT ABI equivalent."],["Interface","Provides low-level access to a COM interface."],["RuntimeName","A WinRT type that can be identified by a name in order to support activation and marshaling."],["RuntimeType","RuntimeType is used to constrain WinRT generic types to WinRT types."]],"type":[["Result","A `Result` type that provides Windows error information."]]});